
@model MVCCoreTutorial.Models.Yolo

@{
    ViewData["Title"] = "Yolo";

    var HtmlMessage = "<b>this is a messgae.</b>";

}

<div class="text-left">
    <h1 class="display-4">Yolo</h1>

    @Model.ID

    <br />

    @Model.YoloMessage

    <br />

    @HtmlMessage

    <br />

    @Html.Raw(HtmlMessage)

    <br />

    @(1 + 1)

    <br />

    @(HtmlMessage.Length )

    <br />

    @{
        var MultiMessage = "This is a multi message";

        <p>This is markup @MultiMessage</p>

    }

    <br />

    @MultiMessage

    <br />

    @{

        List<string> list = new List<string>();
        list.Add("Dave");
        list.Add("Mike");
        list.Add("Chuck");

    }

    <br />

    <ul>
        @for (int i = 0; i < list.Count; i++)
        {
            <li>@list[i]</li>
        }
    </ul>

    <ul>
        @foreach (string i in list)
        {
            <li>@i</li>
        }
    </ul>

    @{
        int k = 0;
    }

    <ul>
        @while (k < list.Count)
        {
            <li>@list[k++]</li>
        }
    </ul>

    @{
        int j = 0;
    }

    <ul>
        @do
        {
            <li>@list[j++]</li>
        } while (j < list.Count);
    </ul>

    <ul>
        @for (int l = 0; l < list.Count; l++)
        {
            <li>@list[l]</li>

            @if (l >= 2)
            {
                <li>...and so on</li>

                break;
            }
        }
    </ul>

    <br />

    @switch (DateTime.Now.DayOfWeek)
    {
        case DayOfWeek.Monday:
            <span>Uh-oh...</span>
            break;
        case DayOfWeek.Friday:
            <span>Weekend coming up!</span>
            break;
        case DayOfWeek.Saturday:
        case DayOfWeek.Sunday:
            <span>Finally weekend!</span>
            break;
        default:
            <span>Nothing special about this day...</span>
            break;
    }

    <br />
    @{
        void RenderTitleName()
        {
            <div>
                This is rendered from a function.
            </div>
        }

        int AnswerToLife(int x, int y)
        {
            return x * y;
        }
    }

    @{
        RenderTitleName();
    }

    <div>
        The answer to life: @AnswerToLife(7, 6)
    </div>
    <br />

    @{

        Func<dynamic, object> YoloTemplate = @<div>@item.ID: @item.YoloMessage</div>;

List<Yolo> yoloList = new List<Yolo>();

Yolo y = new Yolo();
y.ID = 12;
y.YoloMessage = "this is me";
yoloList.Add(y);

y = new Yolo();
y.ID = 42;
y.YoloMessage = "Another time";
yoloList.Add(y);

    }


    @foreach (Yolo yy in yoloList)
    {

        @YoloTemplate(yy);

    }

    <br />

    @await Html.PartialAsync("_Greeting")

    <br />

    @for (int i = 0; i < 3; i++)
    {

        <br />

        @await Html.PartialAsync("_Greeting", Model, new ViewDataDictionary(ViewData) { { "index", i } })

        <br />

    }

    <br />

    <br />

    <br />

    <br />

    <br />

    <br />

    <br />





</div>
